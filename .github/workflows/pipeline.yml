name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 22
        uses: actions/setup-java@v2
        with:
          java-version: '22'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install -DskipTests

#      - name: Lint and format code
#        run: mvn checkstyle:check

      - name: Run tests with Maven
        run: mvn test

      - name: Get version from Maven
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get the JAR file path
        id: get_jar_path
        run: |
          JAR_NAME=$(mvn help:evaluate -Dexpression=project.build.finalName -q -DforceStdout)
          JAR_PATH="./target/${JAR_NAME}.jar"
          if [ -f "$JAR_PATH" ]; then
            echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV
          else
            echo "JAR file not found at $JAR_PATH"
            exit 1
          fi

      - name: Build Docker image
        run: docker build --build-arg JAR_FILE=${{ env.JAR_PATH }} -t ${{ secrets.DOCKER_IMAGE_NAME }}:${{ env.VERSION }} -t ${{ secrets.DOCKER_IMAGE_NAME }}:latest .

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_PASSWORD }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ secrets.DOCKER_IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd ~/${{ secrets.REMOTE_APP_FOLDER_NAME }}
            docker-compose pull
            docker-compose up -d
